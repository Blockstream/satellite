variables:
  PANDOC_BUILDER_IMAGE: glregistry.blockstream.io/satellite/satellite/blocksat-pandoc-builder

stages:
  - test
  - deploy
  - docker
  - pandoc

.pandoc_setup:
  stage: pandoc
  image: google/cloud-sdk
  needs: []
  tags:
    - k8s
  only:
    refs:
      - master
      - web
      - tags

.venv-install:
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip3 install setuptools
    - make && make install

.venv-install-cli:
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip3 install setuptools
    - make && make install-cli

.docker_setup:
  stage: docker
  tags:
    - k8s-docker
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
    BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.11.2/buildx-v0.11.2.linux-amd64
    DOCKER_PLUGINS_DIR: /usr/local/lib/docker/cli-plugins
  needs: []
  before_script:
    - mkdir -p $DOCKER_PLUGINS_DIR
    - wget -O $DOCKER_PLUGINS_DIR/docker-buildx $BUILDX_URL
    - chmod +x $DOCKER_PLUGINS_DIR/docker-buildx
    - apk add make python3 py3-setuptools py3-pip help2man gcc musl-dev python3-dev
    - !reference [.venv-install-cli, script]
    - pip3 install shtab
    - docker buildx create --use

.test:
  stage: test
  variables:
    QT_QPA_PLATFORM: offscreen
  timeout: 2h
  before_script:
    - apt update && apt install -y xvfb libqt5gui5 libxcb-cursor0
  script:
    - !reference [.venv-install, script]
    - pip3 install pytest pytest-qt pytest-xvfb
    - python -m pytest
    # Exercise all imports triggered when launching the CLI
    - blocksat-cli --version

unit-tests-py39:
  extends: .test
  image: python:3.9

unit-tests-py310:
  extends: .test
  image: python:3.10

unit-tests-py311:
  extends: .test
  image: python:3.11

unit-tests-py312:
  extends: .test
  image: python:3.12

unit-tests-py313:
  extends: .test
  image: python:3.13

bash-completion:
  extends: .test
  image: python:3.11
  script:
    - !reference [.venv-install, script]
    - pip3 install shtab
    - make completion
    - git diff --exit-code blocksat-cli.bash-completion

manpage:
  extends: .test
  image: python:3.11
  before_script:
    - apt update && apt install -y help2man
  script:
    - !reference [.venv-install, script]
    - make manpage

flake8-lint:
  image: python:3.9
  before_script:
    - pip3 install flake8
  script:
    - flake8 .

yapf-format:
  image: python:3.9
  before_script:
    - pip3 install yapf
  script:
    - yapf --diff --recursive --verbose .

isort:
  image: python:3.10
  before_script:
    - pip3 install isort
  script:
    - isort --check-only .

test-make-install-apt:
  image: $IMAGE
  stage: test
  only:
    - tags
    - web
  before_script:
    - |
      apt update -y && apt install -y make \
      python3 python3-setuptools python3-pip python3-venv
  script:
    - !reference [.venv-install, script]
  parallel:
    matrix:
      - IMAGE:
          ["ubuntu:jammy", "ubuntu:noble", "debian:bullseye", "debian:bookworm"]

# TODO Remove the gcc/python3-devel installation when zfec ships py3.11 wheels
test-make-install-fedora:
  image: $IMAGE
  stage: test
  only:
    - tags
    - web
  before_script:
    - dnf update -y && dnf install -y make python3 python3-setuptools python3-pip
    - dnf install -y gcc python3-devel
  script:
    - !reference [.venv-install, script]
  parallel:
    matrix:
      - IMAGE: ["fedora:39", "fedora:40", "fedora:41"]

.test-dependencies:
  stage: test
  script:
    - !reference [.venv-install, script]
    - python3 -m unittest blocksatcli/verify_deps_instal.py
    - python3 -m unittest blocksatgui/tests/verify_deps_install.py

test-deb-dependencies:
  image: $IMAGE
  extends: .test-dependencies
  only:
    - tags
    - web
  before_script:
    - |
      apt update -y && apt install -y make \
      python3 python3-setuptools python3-pip python3-venv
  parallel:
    matrix:
      - IMAGE:
          ["ubuntu:jammy", "ubuntu:noble", "debian:bullseye", "debian:bookworm"]

test-fedora-dependencies:
  image: $IMAGE
  extends: .test-dependencies
  only:
    - tags
    - web
  before_script:
    - dnf update -y && dnf install -y make python3 python3-setuptools python3-pip
    - dnf install -y gcc python3-devel
  parallel:
    matrix:
      - IMAGE: ["fedora:39", "fedora:40", "fedora:41"]

pypi-upload:
  image: python
  stage: deploy
  only:
    refs:
      - tags
  when: manual
  script:
    - pip3 install twine setuptools
    - make pypi

docker-build:
  extends: .docker_setup
  rules:
    - if: $DOCKER_BUILD
  script:
    - make docker-buildx

docker-upload:
  extends: .docker_setup
  rules:
    - if: $CI_COMMIT_TAG
    - if: $DOCKER_UPLOAD
  when: manual
  script:
    - echo $DOCKERHUB_PW | docker login -u $DOCKERHUB_USER --password-stdin
    - make docker-buildx
    - make docker-buildx-push

pandoc-docker-builder:
  extends: .pandoc_setup
  tags:
    - k8s-docker
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
  needs: []
  when: manual
  script:
    - cd doc/
    - docker pull $PANDOC_BUILDER_IMAGE:latest || true
    - >
      docker build
      -f pandoc_builder.docker
      --network=host
      --cache-from $PANDOC_BUILDER_IMAGE:latest
      --build-arg BUILDKIT_INLINE_CACHE=1
      -t $PANDOC_BUILDER_IMAGE:latest
      .
    - docker push $PANDOC_BUILDER_IMAGE:latest

pandoc:
  extends: .pandoc_setup
  image:
    name: $PANDOC_BUILDER_IMAGE:latest
    entrypoint: [""]
  script:
    - cd doc/ && python3 pandoc.py
  artifacts:
    paths:
      - doc/blocksat_manual_*.pdf

pandoc-upload:
  extends: .pandoc_setup
  when: manual
  needs: ["pandoc"]
  variables:
    POOL_ID: gitlab-2f4bb583
    PROVIDER_ID: gitlab
    SERVICE_ACCOUNT_EMAIL: gcs-blocksat-docs@satellite-api.iam.gserviceaccount.com
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gl.blockstream.io
  script:
    - echo ${GITLAB_OIDC_TOKEN} > .ci_job_jwt_file
    - gcloud iam workload-identity-pools create-cred-config "projects/697214616889/locations/global/workloadIdentityPools/${POOL_ID}/providers/${PROVIDER_ID}"
      --service-account="${SERVICE_ACCOUNT_EMAIL}"
      --output-file=.gcp_temp_cred.json
      --credential-source-file=.ci_job_jwt_file
    - gcloud auth login --cred-file=.gcp_temp_cred.json --update-adc
    - CLOUDSDK_AUTH_ACCESS_TOKEN=$(gcloud auth application-default print-access-token)
    - echo "GOOGLE_OAUTH_ACCESS_TOKEN=$CLOUDSDK_AUTH_ACCESS_TOKEN" > vars.env
    - cp doc/blocksat_manual_*.pdf doc/blocksat_manual.pdf
    - gsutil cp doc/blocksat_manual*.pdf gs://blocksat-docs

check-markdown-links:
  image:
    name: ghcr.io/tcort/markdown-link-check:3.11.2
    entrypoint: [""]
  only:
    changes:
      - "**/*.md"
  script:
    - >
      echo '{"ignorePatterns": [{"pattern": "^https://help.blockstream.com"}, {"pattern": "^http://localhost:8000"}, {"pattern": "^https://novra.com/product/s400-pro-dvb-satellite-receiver"}]}' > config.json
    - find . -name \*.md | xargs -n1 /src/markdown-link-check -c config.json
